// Generated by typings
// Source: https://raw.githubusercontent.com/Colorfulstan/typed-overwolf/master/overwolf.d.ts
import ODK = Overwolf

declare namespace Overwolf {
    interface Static {
        utils: OverwolfUtils;
        profile: OverwolfProfile;
        extensions: OverwolfExtensions;
        games: OverwolfGames;
        media: OverwolfMedia;
        settings: OverwolfSettings;
        streaming: OverwolfStreaming;
        windows: OverwolfWindows;
        io: OverwolfIO

        version: string;
    }
    /**
     * Currently the boolean returns from the Game Events Provider are wrongly converted to JS from C#.
     * To get the correct value (and prevent breaking code in case it actually gets changed to boolean values)
     * use:
     * var value = TBuggedBoolean + ""
     * var booleanValue = JSON.parse(value.toLowerCase())
     * */
    type TBuggedBoolean = 'False' | 'True'

    namespace GameEvents {

        /** TODO: expand when adding more games ( ... | CSGO.TFeatures | ...) */
        type TFeatures = LeagueOfLegends.TFeatures
        /** TODO: expand when adding more games ( ... | CSGO.TCategories | ...) */
        type TCategories = LeagueOfLegends.TCategories
        /** TODO: expand when adding more games ( ... | CSGO.TCategories | ...) */
        type TEvents = LeagueOfLegends.TEvents

        interface InfoUpdate<F extends TFeatures, C extends TCategories> {
            info: Info<C>
            /** The name of the feature this Info belongs to */
            feature: F
        }
        /** might need to be decoded with decodeURI(JSON.parse(data))*/
        interface Info<T> {
            /** the name of the InfoDB property represented will be the property containing the actual data */
            [CategoryName: string]: InfoData<T> // TODO: is this only this way for League or for all games?
        }
        interface InfoData<T> {
            [key: string]: T
        }

        interface EventUpdate<T extends TEvents> {
            events: IEvent<T>[]
        }
        interface IEvent<T extends TEvents> {
            name: T
            data: any
        }

        namespace LeagueOfLegends {
            type TInfoUpdate = InfoUpdate<TFeatures, TCategories>

            type TFeatures = 'matchState'
                | 'spellsAndAbilities'
                | 'deathAndRespawn'
                | 'kill'
                | 'assist'
                | 'matchState'
                | 'gold'
                | 'minions'
                | 'summoner_info'
                | 'gameMode'
                | 'team'
            type TCategories = 'summoner_info' | 'game_info'

            /** TODO: add 'disabled' documentation */
            interface InfoDB {
                summoner_info: SummonerInfo,
                game_info: GameInfo
            }

            interface SummonerInfo { // unreliable!
                /** The user’s Summoner Id
                 * @since Game Events Provider 0.7.0*/
                id?: TODKNumericString
                /** The user’s region (EUE, EUW, etc.)
                 * @since Game Events Provider 0.7.0 */
                region?: string,
                /** The user’s region (EUNE, EUW, etc.) (upperCase)
                 * @since Game Events Provider 0.7.0 */
                champion?: string,
                /** The user’s summoner’s name (lowerCase)
                 * @since Game Events Provider 0.7.0*/
                name?: string
                /** Marks whether the current champion can use the ult ability several times in a row
                 * (like Elise or Jayce for example)
                 * @since Game Events Provider 0.7.0 */
                championHasSubsequentUlts?: TBuggedBoolean
            }

            interface GameInfo {
                /** current game mode
                 * @since Game Events Provider 0.14.0
                 * */
                gameMode?: 'classic'| 'tutorial'| 'spectator'
                /** @deprecated */
                game_mode?: 'classic'| 'tutorial'| 'spectator'
                /**
                 * Needs to be decoded:
                 * decodeURI(JSON.parse(data))
                 * TODO: more accurate typing of the decoded value
                 * @since Game Events Provider 0.7.0
                 * */
                teams?: string
                /** amount of gold
                 * @since Game Events Provider 0.7.0
                 * */
                gold?: TODKNumericString
                /**
                 * amount of enemy minions killed by the player
                 * @since Game Events Provider 0.7.0
                 * */
                minionKills?: TODKNumericString
                /**
                 * amount of neutral minions killed by the player
                 * @since Game Events Provider 0.7.0
                 */
                neutralMinionKills?: TODKNumericString
                /** @since Game Events Provider 0.14.0 */
                matchStarted?: TBuggedBoolean
                /** @deprecated */
                match_started?: TBuggedBoolean
                /** @since Game Events Provider 0.14.0 */
                matchOutcome?: 'win' | 'lose'
            }

            type TEvents = 'ability'
                | 'spell'
                | 'death'
                | 'respawn'
                | 'kill'
                | 'assist'
                | 'matchStart'
                | 'matchEnd'

            namespace Events {
                /**
                 * @event spell: player uses an ability - numbered 1-4
                 * @event ability: player uses an summoner spell - numbered 1-2
                 * @since Game Events Provider 0.14.0
                 */
                interface spellsAndAbilities extends ODK.GameEvents.IEvent<'ability' | 'spell'> {
                    data: TODKNumericString
                }
                /**
                 * @event death: player's champion died
                 * @event respawn: player's champion respawned
                 * @since Game Events Provider 0.14.0
                 */
                interface deathAndRespawn extends ODK.GameEvents.IEvent<'death' | 'respawn'> {
                }
                /**
                 * @event killing another champion
                 * @since Game Events Provider 0.7.0
                 */
                interface kill extends ODK.GameEvents.IEvent<'kill'> {
                    data: {
                        count: TODKNumericString
                        label: 'kill' | 'double_kill' | 'triple_kill' | 'quadra_kill' | 'penta_kill'
                    }
                }
                /**
                 * Number of times this event happened in the match
                 * @event When player assists in killing another champion
                 * @since Game Events Provider 0.7.0
                 */
                interface assist extends ODK.GameEvents.IEvent<'assist'> {
                    data: TODKNumericString
                }
                /**
                 * @event matchStart: Match has started
                 * @event matchEnd: Match has ended
                 * @since Game Events Provider 0.14.0
                 */
                interface matchState extends ODK.GameEvents.IEvent<'matchStart' | 'matchEnd'> {
                }
            }
        }
    }
}
/** numeric value */
type TODKNumericString = string
///////
/// overwolf
//////
/** An Overwolf event. */
interface OverwolfEventArgs { // TODO: remove this in favor of ODKCallbackArg
    /** @type {string} A status for the given event - either "success" or "failure". */
    status: string;
}

/** Denotes a listenable that just accepts an empty action. */
interface OverwolfParameterlessListenable {
    addListener(callback: () => void): void;
    removeListener(callback: () => void): void;
}

/** Denotes a generic listenable. This differs from an OverwolfEventDispatcher in that
 its publications do not have a status. */
interface OverwolfListenable<TArgType> {
    addListener(callback: (arg: TArgType) => void): void;
    removeListener(callback: (arg: TArgType) => void): void;
}
interface OverwolfGenericListenable<TCallbackType> {
    addListener(callback: TCallbackType): void;
    removeListener(callback: TCallbackType): void;
}

/** Denotes a generic event dispatcher. The type specified in the generic
 constraint is used as the argument type of the resulting listener callback. */
interface OverwolfEventDispatcher<TEventListenerArgs> {
    /**
     * Add a listener to this event.
     * @param {TEventListenerArgs) => void} callback Invoked when the event is called.
     */
    addListener(callback: (args: TEventListenerArgs) => any): void;
    removeListener(callback: (args: TEventListenerArgs) => any): void;
}

/** Argument passed to a callback */
interface ODKCallbackArg {
    status: 'success' | 'error'
    /** only available when status === 'error' stating the reason for failure */
    error?: string
}

///////
/// overwolf.streaming
//////
interface OverwolfStreaming {
    start(settings: StreamSettings, callback: (args: StartStreamEventArgs) => void): void;
}

interface StreamSettings {
    provider: StreamingProvider;
    settings: StreamParams;
}

interface StreamParams {
    stream_info: StreamInfo;
    auth: StreamAuthParams;
    video: StreamVideoOptions;
    audio: StreamAudioOptions;
    peripherals: StreamPeripheralsCaptureOptions;
    ingest_server: StreamIngestServer;
}

interface StreamInfo {
    url: string;
    title: string;
}

interface StreamAuthParams {
    client_id: string;
    token: string;
}

interface StreamVideoOptions {
    auto_calc_kbps: boolean;
    fps: number;
    width: number;
    height: number;
    max_kbps: number;
    encoder: StreamingVideoEncoderSettings;
    capture_desktop: StreamDesktopCaptureOptions;
}

interface StreamDesktopCaptureOptions {
    enable: boolean;
    monitor_id: number;
    force_capture: boolean;
}

interface StreamingVideoEncoderSettings {
    encoder: StreamEncoder;
    config: any;
}

interface StreamingVideoEncoderNVIDIA_NVECSettings {
    preset: StreamEncoderPreset_NVIDIA;
    rate_control: StreamEncoderRateControl_NVIDIA;
    keyframe_interval: number;
}

declare enum StreamEncoderPreset_NVIDIA {
    AUTOMATIC,
    DEFAULT,
    HIGH_QUALITY,
    HIGH_PERFORMANCE,
    BLURAY_DISK,
    LOW_LATENCY,
    HIGH_PERFORMANCE_LOW_LATENCY,
    HIGH_QUALITY_LOW_LATENCY,
    LOSSLESS,
    HIGH_PERFORMANCE_LOSSLESS
}

declare enum StreamEncoderRateControl_NVIDIA {
    RC_CBR,
    RC_CQP,
    RC_VBR,
    RC_VBR_MINQP,
    RC_2_PASS_QUALITY
}

interface StreamingVideoEncoderIntelSettings {
    // Unknown? Docs are empty.
    // http://developers.overwolf.com/api?id=StreamingVideoEncoderIntelSettings
}

interface StreamingVideoEncoderx264Settings {
    keyframe_interval: number;
    rate_control: StreamEncoderRateControl_x264;
    preset: StreamEncoderPreset_x264;
}

declare enum StreamEncoderPreset_x264 {
    ULTRAFAST,
    SUPERFAST,
    VERYFAST,
    FAST,
    MEDIUM,
    SLOW,
    SLOWER,
    VERYSLOW,
    PLACEBO
}

declare enum StreamEncoderRateControl_x264 {
    RC_CBR,
    RC_CQP,
    RC_VBR,
    RC_VBR_MINQP,
    RC_2_PASS_QUALITY
}

declare enum StreamEncoder {
    INTEL,
    X264,
    NVIDIA_NVEC
}

declare enum StreamingProvider {
    Twitch
}

interface StreamAudioOptions {
    mic: StreamDeviceVolume;
    game: StreamDeviceVolume;
}

interface StreamDeviceVolume {
    enable: boolean;
    volume: number;
    device_id: string;
}

interface StreamPeripheralsCaptureOptions {
    capture_mouse_cursor: StreamMouseCursor;
}

declare enum StreamMouseCursor {
    both,
    gameOnly,
    desktopOnly
}

interface StreamIngestServer {
    name: string;
    template_url: string;
}


interface StartStreamEventArgs extends OverwolfEventArgs {
    stream_id?: number;
    error?: string;
}

///////
/// overwolf.windows
//////
interface OverwolfWindows {
    /**
     * Calls the given function with the current window object as a parameter.
     * @param {ODKWindow) => void} callback will be called with the current window object as a parameter.
     */
    getCurrentWindow(callback: (arg: ODKCallbackArg & {window: ODKWindow}) => void): void;
    /**
     * Creates or returns a window by the window name that was declared in the manifest.
     * @param windowName The name of the window that was declared in the data.windows section in the manifest.
     * @param callback A callback function which will be called with the requested window as a parameter.
     */
    obtainDeclaredWindow(windowId: ODKWindowId, callback: (arg: ODKCallbackArg & {window: ODKWindow}) => void): void;
    /**
     * Start dragging a window.
     * @param {string} windowId The ID of the window to drag.
     * @param {function} callback called when the drag is finished.
     */
    dragMove(windowId: ODKWindowId, callback?: () => void): void;
    /**
     * Start resizing the window from a specific edge or corner.
     * @param {string}         windowId The ID of the window to resize.
     * @param {ODKWindowDragEdge} edge     The edge or corner from which to resize the window.
     */
    dragResize(windowId: ODKWindowId, edge: ODKWindowDragEdge): void;
    /**
     * Change the window size to the new width and height in pixels.
     * @param {string} windowId the ID of the window to change size.
     * @param {number} width    The new window width in pixels
     * @param {number} height   The new window height in pixels
     * @param {()  =>       void} callback A callback which is called when the size change is completed.
     */
    changeSize(windowId: ODKWindowId, width: number, height: number, callback?: () => void): void;
    /**
     * Change the window position in pixels from the top left corner.
     * @param {string} windowId the ID of the window to change size.
     * @param {number} width    The new window position on the X axis.
     * @param {number} height   The new window position on the Y Axis.
     * @param {()  =>       void} callback A callback which is called when the position change is completed.
     */
    changePosition(windowId: ODKWindowId, left: number, top: number, callback?: () => void): void;
    /**
     * Closes the window.
     * @param {string} windowId The ID of the window to close.
     * @param {()  =>       void}        callback Called after the window is closed.
     */
    close(windowId: ODKWindowId, callback?: (arg: ODKCallbackArg & {window_id: string}) => void): void;
    /**
     * Minimizes the window.
     * @param windowId The ID or name of the window to minimize.
     * @param callback Called after the window is minimized.
     */
    minimize(windowId: ODKWindowId, callback?: (arg: ODKCallbackArg & {window_id: string}) => void): void;
    /**
     * Maximizes the window.
     * @param {string} windowId The ID of the window to maximize.
     * @param {()  =>       void}        callback Called after the window is maximized.
     */
    maximize(windowId: ODKWindowId, callback?: () => void): void;
    /**
     * Restores the window.
     * NOTE: currently (0.97) only works with the windowId, not the name
     * @param {string} windowId The ID of the window to restore.
     * @param {()  =>       void}        callback Called after the window is restored.
     */
    restore(windowId: ODKWindowId, callback?: (arg: ODKCallbackArg & {window_id: string}) => void): void;


    /**
     * BUG: nonexisting window-ids do report the window as closed instead of giving an error
     * Returns the state of the window (normal/minimized/maximized/closed).
     * @param windowId The id or name of the window.
     * @param callback Called with the window state.
     */
    getWindowState(windowId: ODKWindowId,
                   callback: (arg: ODKCallbackArg & {window_id: string, window_state: ODKWindowStates}) => void
    ): void

    /** Returns the state of all windows owned by the app (normal/minimized/maximized/closed).
     * @param callback Called with an object containing the states of the windows.
     * @since 0.90.200
     * */
    getWindowsStates(callback: (arg: ODKCallbackArg & { result: { [windowName: string]: ODKWindowStates} }) => void): void

    /**
     * Change the window’s topmost status. Handle with care as topmost windows can negatively impact user experience.
     * @param windowId The id or name of the window.
     * @param shouldBeTopmost
     * @param callback
     * @since 0.89.100
     */
    setTopmost(windowId: ODKWindowId, shouldBeTopmost: boolean, callback: (arg: ODKCallbackArg) => void): void

    /**
     * Sends a message to an open window.
     * @param windowId The id or name of the window to send the message to.
     * @param messageId An arbitrary message id.
     * @param messageContent The content of the message.
     * @param callback Called with the status of the request
     */
    sendMessage(windowId: ODKWindowId, messageId: string, messageContent: ODKMessageContent,
                callback: (result: ODKCallbackArg) => void
    )

    /**
     * Fired when the main window is restored.
     * @since 0.85.0
     */
    onMainWindowRestored: OverwolfEventDispatcher<void>;
    /**
     * Fired when the state of a window is changed.
     * @since 0.85.0
     */
    onStateChanged: OverwolfEventDispatcher<ODKWindowStateChangeData>;

    onMessageReceived: OverwolfEventDispatcher<ODKMessage>
}
type ODKWindowDragEdge =
    'None'
        | 'Left'
        | 'Right'
        | 'Top'
        | 'Bottom'
        | 'TopLeft'
        | 'TopRight'
        | 'BottomLeft'
        | 'BottomRight'

type ODKWindowStates = 'normal' | 'minimized' | 'maximized' | 'closed'

interface ODKWindowStateChangeData {
    app_id: string
    window_id: ODKWindowId
    window_name: ODKWindowId
    window_state: ODKWindowStates;
    window_previous_state: ODKWindowStates;
}

/** Content to be sent to another window. Can currently (0.97) only contain string-values */
interface ODKMessageContent {
    [key: string]: string | string[] | number | number[] | boolean | ODKMessageContent
}

interface ODKMessage {
    id: string
    content: ODKMessageContent
}

/** @interface ODKWindow*/
interface ODKWindow {
    /** @lends {ODKWindow} */
    /**@property*/
    id: string;
    /**Gets the window name as declared in the manifest.
     * @type {string}*/
    name: string;
    /** in pixels*/
    width: number;
    /** in pixels*/
    height: number;
    /**Gets the window Y coordinate in pixels from the top of the screen.*/
    top: number;
    /**Gets the window X coordinate in pixels from the top of the screen.*/
    left: number;
    /**Indicates if the window is currently visible or minimized.*/
    isVisible: boolean;
}

/** The ID or the name of a window
 * Id can be obtained through ODKWindow,
 * Name is defined within the manifest */
type ODKWindowId = string

///////
/// overwolf.settings
//////
interface OverwolfSettings {
    /**
     * Returns the hotkey assigned to a givenf eature id by calling the callback.
     * @param {string}                 featureId The feature id for which to get the set hotkey.
     * @param {GetHotkeyEventArgs) => void} callback A function called with the result of the request which contains the hotkey if success.
     */
    getHotKey(featureId: string, callback: (args: GetHotkeyEventArgs) => void): void;

    /**
     * Registers a callback for a given hotkey action. If the registration has failed, the callback is invoked immediately with the "error" status. Otherwise, the callback will be invoked each time the Hotkey is pressed.
     * @param {string}                 actionId The action to be hotkeyed.
     * @param {HotkeyRegistrationEvent) =>        void}        callback The callback to be invoked upon success or failure.
     */
    registerHotKey(featureId: string, callback: (args: ODKHotkeyCallbackArg) => void): void;
}

interface GetHotkeyEventArgs extends ODKCallbackArg {
    hotkey: string;
}

interface ODKHotkeyCallbackArg extends ODKCallbackArg {
    /** only available on success */
    featureId?: string
}

///////
/// overwolf.media
///////
interface OverwolfMedia {
    /**
     * Takes a screenshot and calls the callback with the success status and screenshot Url.
     * @param {ScreenshotEventArgs) => void} callback A function called after the screenshot was taken.
     */
    takeScreenshot(callback: (args: ScreenshotEventArgs) => void): void;

    /**
     * Opens the social network sharing console to allow the user to share a picture.
     * @param {string} imageUrl    The url of the image to share.
     * @param {string} description A description of the image.
     * @param {() => void}        callback An optional callback to invoke after sharing the image.
     */
    shareImage(imageUrl: string, description: string, callback?: () => void): void;

    /**
     * Opens the social network sharing console to allow the user to share a picture.
     * @param {any}    image       The image object to be shared.
     * @param {string} description A description of the image.
     * @param {() => void}        callback An otpional callback to invoke after sharing the image.
     */
    shareImage(image: any, description: string, callback?: () => void): void;

    /** @type {OverwolfParameterlessListenable} Fired when a screenshot was taken. */
    onScreenshotTaken: OverwolfParameterlessListenable;
}

interface ScreenshotEventArgs extends OverwolfEventArgs {
    url: string;
}

///////
/// overwolf.games
///////
interface OverwolfGames {

    /** An API for interacting with games using shared memory. */
    events: {
        /** Sets the required features from the provider.
         * @since 0.93.1 */
        setRequiredFeatures(features: ODK.GameEvents.TFeatures[],
                            callback?: (arg: ODKCallbackArg & {supportedFeatures: string[]}) => void
        )
        /**
         * @since 0.95
         * */
        getInfo(callback: (arg: ODKCallbackArg & {res: any, /** shown when status is "error" */ reason?: string}) => void) // TODO: more accurate typing for res
        /**
         * Fired when there was an error in the game events system.
         * @since 0.78
         * */
        onError: OverwolfListenable<{error: string, isRelaunching: boolean}>
        /**
         * Fired when there are game info updates with a JSON object of the updates.
         * @since 0.96
         * */
        onInfoUpdates2: OverwolfListenable<ODK.GameEvents.InfoUpdate<ODK.GameEvents.TFeatures, ODK.GameEvents.TCategories>>
        /**
         * Fired when there are new game events with a JSON object of the events information.
         * @since 0.96
         * */
        onNewEvents: OverwolfListenable<ODK.GameEvents.EventUpdate<ODK.GameEvents.TEvents>>
    }

    /**
     * An API for tracking keyboard/mouse events.
     * TODO http://developers.overwolf.com/documentation/sdk/overwolf/games/inputtracking/
     * @since 0.88
     */
    inputTracking: {}
    /**
     * Returns an object with information about the currently running game, or null if no game is running.
     * @param {GameInfo) => void} callback Called with the currently running or active game info
     * @since 0.78
     */
    getRunningGameInfo(callback: (information: ODKGameInfo) => void): void;

    /**
     * Returns an object with information about the currently running game (or active games, if more than one), or null if no game is running.
     * @param GameClassId
     * @param callback Called with the currently running or active game info (GameInfo).
     * @example
     * Example callback argument from api-docs might be outdated! (2016/10/25)
     * ```
     * {
     *      "isInFocus": true,
     *      "isRunning": true,
     *      "allowsVideoCapture": true,
     *      "title": "Counter-Strike: Global Offensive",
     *      "id": 77641,
     *      "width": 1920,
     *      "height": 1080,
     *      "logicalWidth": 1920,
     *      "logicalHeight": 1080,
     *      "renderers": [
     *          "D3D9"
     *      ],
     *      "detectedRenderer": "D3D9",
     *      "executionPath": "D://Steam/steamapp/scommon/Counter-Strike Global Offensive/csgo.exe",
     *      "sessionId": "1a1b96a9d8bb439d8f21abc21faa1184",
     *      "commandLine": "D://Steam/steamapps/common/Counter-Strike Global Offensive/csgo.exe" -steam -novid +mat_vignette_enable 0"
     *   }
     *   ```
     *   @since 0.93.1
     */
    getGameInfo(GameClassId: TODKGameClassId,
                callback: (arg: ODKCallbackArg & {gameInfo?: ODKGameInfoExtended}) => void
    ): void

    /** Fired when the game ifno is updated, including game name, game running, game terminated, game changing focus, etc.
     * @event
     * @type {OverwolfListenable<GameInfoChangeEvent>}
     * @since 0.78*/
    onGameInfoUpdated: OverwolfListenable<ODKGameInfoChangeData>;
    /** Fired when a game is launched.
     * @event
     * @type {OverworfListenable}
     * @since 0.78 */
    onGameLaunched: OverwolfParameterlessListenable;

    /** Fired when the rendering frame rate of the currently injected game changes dramatically. The “fps_status” field can be “None”, “Stable”, “Drop” and “Increase”.
     *
     * @example
     * ```
     * {
     *     "fps_status": "Increase",
     *     "fps": 35
     * }
     ```
     * @event
     * @type {OverwolfListenable<FramerateChange>}
     * @since 0.79 */
    onMajorFrameRateChange: OverwolfListenable<FramerateChange>;

    /**
     * @example
     * ```
     * {
     *     "detectedRenderer": "D3D9"
     *  }
     ```
     */
    onGameRendererDetected: OverwolfListenable<{detectedRenderer: string}>

    // TODO: inputTracking

}

interface FramerateChange {
    fps_status: string;
    fps: number;
}

interface ODKGameInfoChangeData {
    gameInfo: ODKGameInfo;
    /** Indicates if there was a change in resolution (i.e. the width or height properties were changed */
    resolutionChanged: boolean;
    /** Indicates if there was a change in the game focus status. */
    focusChanged: boolean;
    /** Indicates if there was a change in the game running status. */
    runningChanged: boolean;
    /** Indicates if the gameInfo property represents a different game than before. */
    gameChanged: boolean;
}

/**
 * numeric representation of a game TODO: more accurate description and link to game-is list if possible or way to find them
 */
type TODKGameClassId = number

// TODO
interface ODKGameInfoExtended extends ODKGameInfo {
    ProcessPath: string
// {
//     "status": "success",
//     "gameInfo": {
//         "GameInfoClassID": 7764,
//         "GameInfoID": 77641,
//         "ProcessPath": "D:\Steam\SteamApps\common\Counter-Strike Global Offensive\csgo.exe",
//         "LauncherPath": "D:\Steam\steam.exe",
//         "LauncherCommandLineParams": "-applaunch 730",
//         "LastTimeVerified": "2016-04-25T06:56:18.180Z",
//         "ManuallyAdded": false,
//         "WasAutoAddedByProcessDetection": false,
//         "GameInfo": {
//             "ID": 77641,
//             "GameTitle": "Counter-Strike: Global Offensive",
//             "DisplayName": "CS: GO",
//             "ProcessNames": [
//                 "SteamApps\*\Counter-Strike Global Offensive\csgo.exe"
//                 ],
//             "LuancherNames": [
//                 "steam.exe"
//                 ],
//             "CommandLine": null,
//             ...
//         }
//     }
// }

}

interface ODKGameInfo { // http://developers.overwolf.com/documentation/sdk/overwolf/games/gameinfo/
    /** Returns whether the game represented is currently in focus.
     * @since 0.78 */
    isInFocus: boolean
    /** Returns whether the game represented is currently running.
     * @since 0.78 */
    isRunning: boolean
    /** Returns whether the game represented allows video to be captured.
     * @since 0.78 */
    allowsVideoCapture: boolean
    /** Returns the title of the represented game.
     * @since 0.78 */
    title: string
    /** Returns the id of the represented game.
     * @since 0.78 */
    id: number
    /** Returns the pixel width of the represented game window.
     * @since 0.78*/
    width: number
    /** Returns the pixel height of the represented game window.
     * @since 0.78 */
    height: number
    /** Returns the game reported (logical) pixel width of the represented game window.
     * @since 0.78 */
    logicalWidth: number
    /** Returns the game reported (logical) pixel height of the represented game window.
     * @since 0.78 */
    logicalHeight: number
    /** Returns an array of the rendering technology names supported by the running game.
     * @since 0.78 */
    renderers: string[]
    /** Returns the rendering technology detected by the running game.
     * @since 0.89.102 */
    detectedRenderer: string
    /** Returns the game process commandline
     * @since 0.78 */
    commandLine: string
    /** undocumented TODO */
    sessionId: any
    /** undocumented TODO */
    executionPath: any
}

///////
/// overwolf.extensions
///////
interface OverwolfExtensions {
    // last update: 2016/10/28 Client v0.99
    /**
     * Launch an extension by its unique id
     * @param {string} uid       The extension unique id
     * @param {any}    parameter A parameter to pass to the extension. The extension may or may not use this parameter.
     * @since 0.78
     */
    launch(uid: string, parameter?: any): void;

    /**
     * Retrieve a service obejct (which will usually provide external APIs) by an id.
     * @param {string} id       The service id.
     * @param {void}   callback A function called with the service, fi found, and a status indicating success or failure.
     * @since 0.78
     */
    getService<TServiceType>(id: string, callback: (args: LocateServiceEvent<TServiceType>) => void): void;

    /**
     * Sets a string for other extensions to read.
     * @param info A string to post
     * @since 0.91
     */
    setInfo(info: string): void

    /**
     * Gets an extension’s info string.
     * @param id The id of the extension to get info for.
     * @param callback Called with the info.
     * @since 0.91
     */
    getInfo(id: string, callback: (info: string)=> any)

    /**
     * Requests info updates for extension. Will also be called when the extension launches/closes.
     * @param id The id of the extension to get updates for.
     * @param eventsCallback A callback to receive info updates.
     * @param callback The status of the request.
     * @since 0.91
     */
    registerInfo(id: string, eventsCallback, callback) // TODO: typing for callbacks

    /**
     * Stop requesting info for extension.
     * @param id The id of the extension to stop getting updates for.
     * @param callback The status of the request.
     * @since 0.91
     */
    unregisterInfo(id, callback) // TODO: typings

    /**
     * Gets the running state of an extension.
     * @param id The id of the extension to get updates for.
     * @param callback The result of the request.
     * @example
     * Callback argument
     * ```
     * {
     *     "status": "success",
     *     "isRunning": true
     * }
     * ```
     * @since 0.91
     */
    getRunningState(id, callback) // TODO: typings

    /**
     * Returns the requested extension’s manifest object.
     * @param id The id of the extension to get the manifest for.
     * @param callback A function called with the manifest data.
     * @since 0.91
     * @example
     * Callback argument:
     * ```
     * {
     *     "manifest_version": 1,
     *     "type": "WebApp",
     *     "meta": {
     *         "name": "App Name",
     *         "version": "1.0.0.0",
     *         "minimum-overwolf-version": "0.92.21.0",
     *         "author": "Author",
     *         "icon": "icon.png",
     *         "icon_gray": "icon_gray.png",
     *         "description": ""
     *     },
     *     "UID": "lftmchifcjibofkemmelmnjeialamgnigfpthzez",
     *     "permissions": [
     *         "Extensions",
     *         "Hotkeys",
     *         "GameInfo",
     *         "GameControl",
     *         "FileSystem"
     *     ],
     *     "channel-id": 0,
     *     "in-game-plugin": null,
     *     "dependencies": null,
     *     "data": {
     *         "externally_connectable": {
     *             "matches": [
     *                 "http://*.overwolf.com",
     *                 "http://overwolf.com"
     *             ]
     *         },
     *         "protocol_override_domains": null,
     *         "force_browser": "NotSet",
     *         "plugins": [
     *             "npSimpleIOPlugin.dll"
     *         ],
     *         "game_events": null,
     *         "extra-objects": null,
     *         "hotkeys": null,
     *         "content_scripts": null,
     *         "launch_events": [
     *             {
     *                 "event": 1,
     *                 "event_data": {
     *                     "game_ids": null,
     *                     "wait_for_stable_framerate": null
     *                 },
     *                 "start_minimized": true
     *             }
     *         ],
     *         "user_agent": null,
     *         "tray_menu": false,
     *         "logitech": null,
     *         "windows": {
     *             "index": {
     *                 "file": "index.html",
     *                 "show_in_taskbar": true,
     *                 "transparent": true,
     *                 "resizable": false,
     *                 "show_minimize": true,
     *                 "clickthrough": false,
     *                 "use_os_windowing": false,
     *                 "disable_rightclick": false,
     *                 "forcecapture": false,
     *                 "show_only_on_stream": false,
     *                 "ignore_keyboard_events": false,
     *                 "in_game_only": false,
     *                 "desktop_only": false,
     *                 "disable_restore_animation": false,
     *                 "grab_keyboard_focus": false,
     *                 "size": {
     *                     "width": 910,
     *                     "height": 560
     *                 },
     *                 "start_position": {
     *                     "top": 10,
     *                     "left": 10
     *                 },
     *                 "topmost": false
     *             }
     *         },
     *         "start_window": "index"
     *     },
     *     "is_launchable": true,
     *     "has_devtools": true,
     *     "is_enabled": true,
     *     "is_hidden": false,
     *     "disable_dockbutton": false,
     *     "has_dockbutton": true,
     *     "install_state": 2,
     *     "is_installed": true,
     *     "options_page": null,
     *     "has_options_page": false,
     *     "hide_from_store": false,
     *     "is_bundled": false
     * }
     * ```
     */
    getManifest(id, callback) // TODO: typings


    /**
     * opens the development-tool window for the stated application and window
     * @undocumented
     * */
    showDevTools(appUID: string, windowId: ODKWindowId): void

    /**
     * Triggered, whenever a Exception is thrown that is not caught.
     * Mainly useful to catch exceptions thrown by externally included scripts e.g. within IFrames
     *
     * addListener takes a function with following params:
     * message: string - the error message
     * functionName - ?
     * scriptName - ?
     * // TODO: TS typings and better documentation
     *
     * @undocumented
     * @since 0.99.10 // TODO check versioning when documented
     */
    onUncaughtException: any // TODO: typings - OverwolfListenable does not allow the callback to be given as type

    /**
     * Returns an object with functions providing more information and utilities regarding the current extension.
     * @type {any}
     * @since 0.78
     */
    current: {
        getExtraObject(): any // TODO: typings
        /**
         * Same as OverwolfExtensions.getManifest without requiring the id
         * @see {@link OverwolfExtensions#getManifest}
         */
        getManifest(callback) // TODO: typings
        // TODO: additional methods from extensions.current
    };

    /**
     * Fires when the current app is launched while already running.
     *
     * This is useful in the case where the app has custom logic for clicking its dock button while it is already running.
     * The event contain an ‘origin’ string which what triggered the app launch (dock, storeapi, odk, etc…)
     * @since 0.92.300
     */
    onAppLaunchTriggered: OverwolfListenable<string> // TODO: typing
}

interface ODKExtensionMetadata {
    /** Mandatory. Name of your app. @since 0.78 */
    name: string
    /** Mandatory. Who developed the app. @since 0.78 */
    author: string
    /**Mandatory. Version of your app. Needs to be in the format of X.X.X where the X’s are numbers. @since 0.78 */
    version: string
    /**Mandatory. Minimum version of the Overwolf Client with which the app is compatible. The format is similar to the version field. @since 0.78 */
        "minimum-overwolf-version": string

    /**A name in a Java-namespace-like format (com.[company].[product]) uniquely identifying the extension. @since 0.78 */
        "access-name": string
    /**Mandatory. The description of your app on the Appstore tile. Limited to 180 characters. @since 0.78 */
    description: string

    /**Short name of your app. Provide a short title that will fit in the dock button area – 18 chars max.     @since 0.79*/
    dock_button_title: string
    /** Mandatory. Name of your app. */

    /**A relative path from the app folder to the icon’s png file. Mandatory. This is the mouse-over (multi-colored) version of the icon that will be displayed on the Overwolf dock. The icon dimensions should be 256×256 pixels.
     * @since 0.78 */
    icon: string

    /**A relative path from the app folder to the icon’s png file. This is the grayscale version of the icon that will be displayed on the Overwolf dock. The icon dimensions should be 256×256 pixels.
     * @since 0.78 */
    icon_gray: string
    /**
     * A relative path from the app folder to a png file. This is the icon that will appear in the store library. The icon dimensions should be 200×200 pixels.
     * @since 0.82
     */
    store_icon
}

interface ODKManifest { // TODO - update with http://developers.overwolf.com/documentation/sdk/overwolf/manifest-json/ (complete rework necc.)
    // "manifest_version": 1,
    // "type": "WebApp",
    /** Mandatory. The extension metadata. @see {@link ODKExtensionMetadata}
     * @since 0.78*/
    meta: ODKExtensionMetadata, // Last uptade 2016/10/28
    /**
     * unique id for the app generated by the client
     * @example
     * lftmchifcjibofkemmelmnjeialamgnigfpthzez
     */
    UID: string,
    // "permissions": [
    //     "Extensions",
    //     "Hotkeys",
    //     "GameInfo",
    //     "GameControl",
    //     "FileSystem"
    //     ],
    // "channel-id": 0,
    // "in-game-plugin": null,
    // "dependencies": null,
    // "data": {
    //     "externally_connectable": {
    //         "matches": [
    //             "http://*.overwolf.com",
    //             "http://overwolf.com"
    //             ]
    //     },
    //     "protocol_override_domains": null,
    //     "force_browser": "NotSet",
    //     "plugins": [
    //         "npSimpleIOPlugin.dll"
    //         ],
    //     "game_events": null,
    //     "extra-objects": null,
    //     "hotkeys": null,
    //     "content_scripts": null,
    //     "launch_events": [
    //         {
    //             "event": 1,
    //             "event_data": {
    //                 "game_ids": null,
    //                 "wait_for_stable_framerate": null
    //             },
    //             "start_minimized": true
    //         }
    //         ],
    //     "user_agent": null,
    //     "tray_menu": false,
    //     "logitech": null,
    //     "windows": {
    //         "index": {
    //             "file": "index.html",
    //             "show_in_taskbar": true,
    //             "transparent": true,
    //             "resizable": false,
    //             "show_minimize": true,
    //             "clickthrough": false,
    //             "use_os_windowing": false,
    //             "disable_rightclick": false,
    //             "forcecapture": false,
    //             "show_only_on_stream": false,
    //             "ignore_keyboard_events": false,
    //             "in_game_only": false,
    //             "desktop_only": false,
    //             "disable_restore_animation": false,
    //             "grab_keyboard_focus": false,
    //             "size": {
    //                 "width": 910,
    //                 "height": 560
    //             },
    //             "start_position": {
    //                 "top": 10,
    //                 "left": 10
    //             },
    //             "topmost": false
    //         }
    //     },
    //     "start_window": "index"
    // },
    // "is_launchable": true,
    // "has_devtools": true,
    // "is_enabled": true,
    // "is_hidden": false,
    // "disable_dockbutton": false,
    // "has_dockbutton": true,
    // "install_state": 2,
    // "is_installed": true,
    // "options_page": null,
    // "has_options_page": false,
    // "hide_from_store": false,
    // "is_bundled": false
}

interface LocateServiceEvent<TServiceType> extends OverwolfEventArgs {
    /** @type {any} The located service. */
    service: TServiceType;
}

///////
/// overwolf.profile
//////
interface OverwolfProfile {
    /**
     * Get the current user.
     * @param {any) => void} callback A callback to invoke with the current user or an error.
     */
    getCurrentUser(callback: (user: any) => void): void;

    /** Open the login dialog. */
    openLoginDialog(): void;

    /**
     * Fired when a user logged in or logged out.
     */
    onLoginStateChanged: OverwolfEventDispatcher<LoginStateChangedEvent>;
}

interface LoginStateChangedEvent extends OverwolfEventArgs {
    /** @type {string} The state of the connection - "Online", "Offline" or "Connecting" */
    connectionState: string;
    /** @type {string} The username of the logged in user if the status is not "Offline". */
    username?: string;
}

///////
/// overwolf.utils
//////
interface OverwolfUtils {
    /**
     * Place the given data on the clipboard.
     * Requires the Clipboard permission.
     * @param {string} data The data to place on the clipboard.
     */
    placeOnClipboard(data: string): void;
    /**
     * Returns the data currently on the clipboard.
     * Requires the Clipboard permission.
     * @param {string) => void} callback Invoked with the data on the clipboard.
     */
    getFromClipboard(callback: (data: string) => void): void;

    // TODO: Monitor interface
    /**
     * Get the list of monitors active. Requires the DesktopStreaming permission.
     * @param {Array<any>) => void} callback An array of monitors.
     */
    getMonitorsList(callback: (monitors: Array<any>) => void): void;

    /**
     * Send a key stroke to the game. Requires the GameControl permission.
     * @param {string} keyString The keystroke to send.
     */
    sendKeyStroke(keyString: string): void;
}

interface OverwolfIO { // TODO http://developers.overwolf.com/documentation/sdk/overwolf/io/
    fileExists: (arg, callback) => any // TODO
}

declare var overwolf: Overwolf.Static;
declare var OwAd: any // TODO: create ow-ad-sdk typings
declare interface SimpleIOPlugin extends HTMLElement { // TODO: typings

    // constants return paths without trailing slash
    PROGRAMFILES: string
    PROGRAMFILESX86: string
    COMMONFILES: string
    COMMONFILESX86: string
    COMMONAPPDATA: string
    DESKTOP: string
    WINDIR: string
    SYSDIR: string
    SYSDIRX86: string
    MYDOCUMENTS: string
    MYVIDEOS: string
    MYPICTURES: string
    MYMUSIC: string
    COMMONDOCUMENTS: string
    FAVORITES: string
    FONTS: string
    // TODO: what does History return? also a path?
    HISTORY: string
    STARTMENU: string
    LOCALAPPDATA: string

    /**
     * check if a file exists locally
     * @param filePath
     * @param callback
     */
    fileExists: (filePath: string, callback: (status: boolean) => void) => void
    /**
     * check if a given path is a directory (false if not or doesn't exist)
     * @param filePath
     * @param callback
     */
    isDirectory: (filePath: string, callback: (status: boolean) => void) => void
    /**
     * reads a file's contents and returns as text.
     * Use the second parameter to indicate if the file is in UCS-2 (2 bytes per char)
     * and it will automatically do the UTF8 conversion. Otherwise, returns in UTF8
     * @param filePath
     * @param isUCS2 indicates if the file is in UCS-2 (2 bytes per char). If true the data will be converted to UTF8
     * @param callback
     */
    getTextFile: (filePath: string, isUCS2: boolean, callback: (status: boolean, data: string) => void) => void

    // TODO: check if limit is documented correctly
    // TODO: check if callback arg "data" is correctly typed
    /**
     * reads a file's contents and returns as an array of byte values.
     * NOTE: this function is extremly slow!
     * Use only for small files or to get file header info using the second parameter (limit) to limit amount of data to fetch
     * @param filePath
     * @param limit sets the amount of bytes to receive. -1 indicates no limitation
     * @param callback
     */
    getBinaryFile: (filePath: string, limit: number, callback: (status: boolean, data: ArrayBuffer) => void) => void

    /**
     * Create a file on the local filesystem with given text content.
     * For security reasons, we only allow to write to the local-app-data folder
     * Note: can't append to files.
     * This function will either create a new file or overwrite the previous one (based on implementation).
     * @param filePathWithinLocalAppData
     * @param content
     * @param callback
     */
    writeLocalAppDataFile: (filePathWithinLocalAppData: string,
                            content: string,
                            callback: (status: boolean, message: string) => void
    ) => void

    // TODO: update documentation when https://github.com/overwolf/overwolf-plugins/issues/3 got solved
    /**
     * Stream a file on the local filesystem to a javascript callback (text files only)
     * NOTE: don't call other plugin APIs from callback
     * @param filePath
     * @param callback
     */
    listenOnFile: (fileId: string, filePath: string, startAtEnd: boolean,
                   callback: (fileId: string, status: boolean)=>void
    ) => void
    /** TODO: update documentation when https://github.com/overwolf/overwolf-plugins/issues/3 got solved
     * registers a handler for the file-stream opened through listenOnFile
     */
    onFileListenerChanged: OverwolfGenericListenable<(listeningId: string, status: boolean, data: string) => void>
    /** TODO: update documentation when https://github.com/overwolf/overwolf-plugins/issues/3 got solved
     * Stop streaming a file that you previously passed when calling |listenOnFile|
     * NOTE: there are no callbacks - as this will never fail (even if the stream doesn't exist)
     * NOTE: you will get a call to |onFileListenerChanged| with status == false when calling this function
     * @param listeningId id passed to listenOnFile
     */
    stopFileListen: (listeningId: string) => void

    /**
     * Retreive the most updated (latest accessed) file in a given folder (good for game logs)
     */
    getLatestFileInDirectory: (path: string, callback: (status: boolean, filename: string) => void) => void
    /**
     * Lists the content of given directory
     * @param path
     * @param callback
     */
    listDirectory: (path: string, callback: (status: boolean, listing: ODKFileToken[]) => void) => void
}

// TODO: check if correct when https://github.com/overwolf/overwolf-plugins/issues/4 got solved
/** A simple representation of a local file */
interface ODKFileToken {
    name: string
    type: 'dir' | 'file'
}